makeCacheMatrix <- function(x = matrix()) {
Inverse <- NULL
set <- function(y) {
x <<- y
Inverse <<- NULL
}
get <- function() x
SetInverse <- function(solve) Inverse <<- solve
GetInverse <- function() Inverse
list(set = set,
get = get,
SetInverse = SetInverse,
GetInverse = GetInverse)
}
# Creating cacheSolve function --------------------------------------------
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("Getting cached inverse data")
return(Inverse)
}
data <- x$get()
Inverse <- solve(data, ...)
x$SetInverse(Inverse)
Inverse
}
# Testing -----------------------------------------------------------------
MyMatrix <-matrix(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
cacheSolve(Test_1)
#Returns a vector of set, get, setinverse and getinverse for cacheing matrix inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <-function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Checks if inverse has already been calculted. If so, returns the previous calculation. If not, calcualtes inverse.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
MyMatrix <-matrix(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
cacheSolve(Test_1)
set.seed(1)
rpois(5, 2)
rnorm?
?rnorm
rnorm(5,0,1)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?stack
stack(matrix(1:4,2,2))
stack(matrix(1:4,2,2))
matrix(1:4,2,2)
stack(test2
)
best("SC", "heart attack")
setwd("~/Documents/GitHub/GettingCleaningData/GettingCleaningData")
#Test Data
TimeFreqDom<- read.table('test/X_test.txt')
Activity<- read.table('test/Y_test.txt')
Subject<- read.table('test/subject_test.txt')
colnames(Subject)<- 'Subject'
colnames(Activity)<- 'Activity'
TestData<- cbind(Activity,Subject,TimeFreqDom)
rm(TimeFreqDom,Activity,Subject)
#Reading Train
TimeFreqDom<- read.table('train/X_train.txt')
Activity<- read.table('train/Y_train.txt')
Subject<- read.table('train/subject_train.txt')
colnames(Subject)<- 'Subject'
colnames(Activity)<- 'Activity'
TrainData<- cbind(Activity,Subject,TimeFreqDom)
rm(TimeFreqDom,Activity,Subject)
TestTrain<- rbind(TestData, TrainData)
rm(TestData, TrainData)
Activity<- read.table('activity_labels.txt')
LookupActivity <- Activity$V2
names(LookupActivity)<- Activity$V1
Features<- read.table('features.txt', fill = T)
colnames(TestTrain)[3:563]<- Features$V2
Features<- subset(Features, grepl('mean',Features$V2)|grepl('std', Features$V2) )
Features$V1<- Features$V1+2
TestTrain<- TestTrain[,c(1,2,Features$V1)]
TestTrain$Activity<- LookupActivity[TestTrain$Activity]
rm(LookupActivity,Features,Activity)
PersonActivityCombo <- unique.data.frame(TestTrain[,c(1,2)])
PersonActivityCombo<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
y <- data.frame()
y<- for (column in 3:ncol(x)) {
y[column]<- mean(x[column])
}
return(y)
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo <- unique.data.frame(TestTrain[,c(1,2)])
PersonActivityCombo<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
y <- data.frame()
y<- for (column in 3:ncol(x)) {
y[column]<- mean(x[column])
}
return(y)
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
View(PersonActivityCombo)
View(TestTrain)
PersonActivityCombo<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
y <- data.frame()
z<- as.data.frame(apply(y[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
x$Activity<- activity
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo2<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
y <- data.frame()
z<- as.data.frame(apply(y[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo2<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
y <- data.frame()
z<- as.data.frame(apply(y[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo2<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
y <- data.frame()
z<- as.data.frame(apply(y[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo2<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
y <- data.frame()
z<- as.data.frame(apply(y[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo <- unique.data.frame(TestTrain[,c(1,2)])
PersonActivityCombo2<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
y <- data.frame()
z<- as.data.frame(apply(y[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo2<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo2<- mapply(function(person,activity){
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
return(z)
}, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
View(PersonActivityCombo2)
View(PersonActivityCombo)
PersonActivityCombo2
PersonActivityCombo2[1]
PersonActivityCombo2[1,]
PersonActivityCombo3<- data.frame()
table(grepl('&', PersonActivityCombo$Activity))
table(grepl('&', PersonActivityCombo$Subject))
PersonActivityCombo$CombinedKey<- paste(PersonActivityCombo$Activity, '&',PersonActivityCombo$Subject, sep = '')
View(PersonActivityCombo)
strsplit(PersonActivityCombo$CombinedKey[1])[1]
strsplit(PersonActivityCombo$CombinedKey[1],split = '&')[1]
strsplit(PersonActivityCombo$CombinedKey[1],split = '&')[[1]]
strsplit(PersonActivityCombo$CombinedKey[1],split = '&')$1
strsplit(PersonActivityCombo$CombinedKey[1],split = '&')[[1,]]
strsplit(PersonActivityCombo$CombinedKey[1],split = '&')[[1]]
strsplit(PersonActivityCombo$CombinedKey[1],split = '&')[[[1]]]
strsplit(PersonActivityCombo$CombinedKey[1],split = '&')[[,1]]
strsplit(PersonActivityCombo$CombinedKey[1],split = '&')[,1]
unlist(strsplit(PersonActivityCombo$CombinedKey[1],split = '&'))[,1]
unlist(strsplit(PersonActivityCombo$CombinedKey[1],split = '&'))[1]
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(x,split = '&'))[2]
activity <- unlist(strsplit(x,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
PersonActivityCombo3<<- rbind(PersonActivityCombo3,z)
}
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
PersonActivityCombo3<<- rbind(PersonActivityCombo3,z)
}
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
z$Subject<- person
z$Activity<- activity
PersonActivityCombo3<<- rbind(PersonActivityCombo3,z)
}
debug(PersonActivityCombo3)
debugSource("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R")
View(z)
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<<- cbind(PersonActivityCombo3,z)
}
PersonActivityCombo3<- data.frame()
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<<- cbind(PersonActivityCombo3,z,)
}
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- cbind(PersonActivityCombo3,z,)
}
debugSource("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R", echo=TRUE)
View(z)
View(z)
View(x)
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- cbind(PersonActivityCombo3,z)
}
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- if(nrow(PersonActivityCombo)>0 & nrow(z)>0){ cbind(PersonActivityCombo3,z)}
}
debugSource("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R", echo=TRUE)
View(x)
View(z)
#Test Data
TimeFreqDom<- read.table('test/X_test.txt')
Activity<- read.table('test/Y_test.txt')
Subject<- read.table('test/subject_test.txt')
#Renaming test columns before merge
colnames(Subject)<- 'Subject'
colnames(Activity)<- 'Activity'
TestData<- cbind(Activity,Subject,TimeFreqDom)
rm(TimeFreqDom,Activity,Subject)
#Reading Train
TimeFreqDom<- read.table('train/X_train.txt')
Activity<- read.table('train/Y_train.txt')
Subject<- read.table('train/subject_train.txt')
#Renaming train columns before merge
colnames(Subject)<- 'Subject'
colnames(Activity)<- 'Activity'
TrainData<- cbind(Activity,Subject,TimeFreqDom)
rm(TimeFreqDom,Activity,Subject)
TestTrain<- rbind(TestData, TrainData)
rm(TestData, TrainData)
# Cleaning Data -----------------------------------------------------------
# Creating a lookup for Activity
Activity<- read.table('activity_labels.txt')
LookupActivity <- Activity$V2
names(LookupActivity)<- Activity$V1
# Keeping only the mean and standard deviation
Features<- read.table('features.txt', fill = T)
colnames(TestTrain)[3:563]<- Features$V2
Features<- subset(Features, grepl('mean',Features$V2)|grepl('std', Features$V2) )
Features$V1<- Features$V1+2
TestTrain<- TestTrain[,c(1,2,Features$V1)]
TestTrain$Activity<- LookupActivity[TestTrain$Activity]
rm(LookupActivity,Features,Activity)
# Clean Data Set  ---------------------------------------------------------
PersonActivityCombo <- unique.data.frame(TestTrain[,c(1,2)])
PersonActivityCombo$CombinedKey<- paste(PersonActivityCombo$Activity, '&',PersonActivityCombo$Subject, sep = '')
# PersonActivityCombo2<- mapply(function(person,activity){
#   x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
#
#   z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
#   z$Subject<- person
#   z$Activity<- activity
#   return(z)
# }, PersonActivityCombo$Subject, PersonActivityCombo$Activity)
PersonActivityCombo3<- data.frame()
PersonActivityCombo3<- for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- if(nrow(PersonActivityCombo)>0 & nrow(z)>0){ cbind(PersonActivityCombo3,z)}
}
PersonActivityCombo3<- sapply(PersonActivityCombo$CombinedKey, function(x){ for(combo in x){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- if(nrow(PersonActivityCombo)>0 & nrow(z)>0){ cbind(PersonActivityCombo3,z)}
}
})
source("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R", echo=TRUE)
PersonActivityCombo3<- sapply(PersonActivityCombo$CombinedKey, function(x){ for(combo in x){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- if(nrow(PersonActivityCombo)>0 & nrow(z)>0){ cbind(PersonActivityCombo3,z)}
else(PersonActivityCombo3<- z)
}
})
PersonActivityCombo3<- data.frame(79,)
PersonActivityCombo3<- data.frame(79,)
PersonActivityCombo3<- data.frame(79,180)
PersonActivityCombo3<- data.frame(row.names = colnames(TestTrain[-c(1:2)])
PersonActivityCombo3<- data.frame(row.names = colnames(TestTrain[-c(1:2)]))
PersonActivityCombo3<- sapply(PersonActivityCombo$CombinedKey, function(x){ for(combo in x){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- if(nrow(PersonActivityCombo)>0 & nrow(z)>0){ cbind(PersonActivityCombo3,z)}
else(PersonActivityCombo3<- z)
}
})
View(PersonActivityCombo3)
PersonActivityCombo3[["STANDING&2"]]
PersonActivityCombo3<- sapply(PersonActivityCombo$CombinedKey, function(x){ for(combo in x){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- cbind(PersonActivityCombo3,z)
}
})
PersonActivityCombo3<- data.frame(row.names = colnames(TestTrain[-c(1:2)]))
PersonActivityCombo3<- sapply(PersonActivityCombo$CombinedKey, function(x){ for(combo in x){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<- cbind(PersonActivityCombo3,z)
}
})
View(PersonActivityCombo3)
debugSource("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R", echo=TRUE)
debugSource("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R")
View(PersonActivityCombo3)
source("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R", echo=TRUE)
View(PersonActivityCombo3)
PersonActivityCombo3<- data.frame(row.names = colnames(TestTrain[-c(1:2)]))
PersonActivityCombo3<- sapply(PersonActivityCombo$CombinedKey, function(x){ for(combo in x){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<<- cbind(PersonActivityCombo3,z)
}
})
View(PersonActivityCombo3)
debugSource("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R", echo=TRUE)
View(x)
debugSource("~/Documents/GitHub/GettingCleaningData/GettingCleaningData/run_analysis.R", echo=TRUE)
View(z)
View(PersonActivityCombo3)
View(PersonActivityCombo3)
View(z)
View(PersonActivityCombo3)
View(PersonActivityCombo3)
PersonActivityCombo3<- apply(PersonActivityCombo$CombinedKey, function(x){ for(combo in x){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<<- cbind(PersonActivityCombo3,z)
}
})
?apply
PersonActivityCombo3<- data.frame(row.names = colnames(TestTrain[-c(1:2)]))
for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<<- cbind(PersonActivityCombo3,z)
}
View(PersonActivityCombo3)
TidyNames<- colnames(PersonActivityCombo3)
?gsub
TidyNames<- colnames(PersonActivityCombo3)
TidyNames<- sapply(TidyNames, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals)', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,length(x)))
return(Final)
})
TidyNames
TidyNames<- colnames(PersonActivityCombo3)
TidyNames<- sapply(TidyNames, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals)', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,length(x)))
return(Final)
})
TidyNames<- colnames(PersonActivityCombo3)
TidyNames<- rownames(PersonActivityCombo3)
TidyNames<- sapply(TidyNames, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals)', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,length(x)))
return(Final)
})
TidyNames<- sapply(TidyNames, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals)', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,length(x)), sep = '')
return(Final)
})
TidyNames<- rownames(PersonActivityCombo3)
TidyNames<- sapply(TidyNames, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals)', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,length(x)), sep = '')
return(Final)
})
TidyNames<- sapply(TidyNames, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals)', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,nchar(x)), sep = '')
return(Final)
})
TidyNames
TidyNames<- as.data.frame(rownames(PersonActivityCombo3))
TidyNames$`rownames(PersonActivityCombo3)`<- sapply(TidyNames$`rownames(PersonActivityCombo3)`, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals)', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,nchar(x)), sep = '')
return(Final)
})
View(TidyNames)
View(TidyNames)
View(TestTrain)
View(TestTrain)
TidyNames$`rownames(PersonActivityCombo3)`[77]
TidyNames2<- as.data.frame(rownames(PersonActivityCombo3))
View(TidyNames2)
TidyNames<- as.data.frame(rownames(PersonActivityCombo3))
TidyNames$`rownames(PersonActivityCombo3)`<- sapply(TidyNames$`rownames(PersonActivityCombo3)`, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,nchar(x)), sep = '')
return(Final)
})
rownames(PersonActivityCombo3)<- TidyNames$`rownames(PersonActivityCombo3)`
write.table(PersonActivityCombo3,'Final.txt',row.name=FALSE)
